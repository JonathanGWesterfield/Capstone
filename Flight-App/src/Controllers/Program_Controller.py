import sys
from PyQt5 import QtWidgets as qtw, QtCore as qtc
from View_TrackingScreen import TrackingWindow
from View_StartupScreen import StartupWindow
from View_VerifySetupScreen import VerifySetupWindow
from View_ReportScreen import ReportWindow
from View_LoadingScreen import LoadingWindow
from Controllers.PhoneController import PhoneControl as PhoneControl
import time, os

class Controller:
    """
    Controller class for the application. Changes between application views based on user input.
    Run this file in order to begin the application.
    :return: None
    """
    #fileTransferComplete = qtc.pyqtSignal()

    def __init__(self, phoneControl: PhoneControl):
        self.pilotName = ''
        self.instructorName = ''
        self.flightInstructions = ''
        self.flightModeEnabled = False
        self.phoneControl = phoneControl
        pass

    def show_home(self):
        """
        Loads the home startup screen for the user.
        :return: None
        """
        # Close previous window.
        try:
            self.tracking_window.close()
        except:
            print("Tracking window not open")
        try:
            self.window.close()
        except:
            print("Main window not open")
        try:
            self.verify_screen.close()
        except:
            print("Verify screen window not open")
        try:
            self.report_window.close()
        except:
            print("Report window not open")
        try:
            self.loading_window.close()
        except:
            print("Loading window not open")

        # Initialize home startup screen by instantiating StartupWindow class.
        self.home = StartupWindow(self.flightModeEnabled)

        # Attach functionality to signals in StartupWindow.
        # Signals are generated by the StartupWindow class when a button is pushed to change views.
        self.home.sigVerifySetup.connect(self.show_verify_screen)
        self.home.sigStartTracking.connect(self.show_tracking_window)

        # Import previous flight
        self.home.sigImportFlight.connect(self.import_flight)

        # Show the screen
        self.home.show()

    def import_flight(self, flightPath: str):
        """
        Reads in a .flight file and displays the report view for it.
        :return: None
        """
        if flightPath != '':
            print('Importing file ' + flightPath)
            self.show_report_window(flightPath, True)

    def show_verify_screen(self):
        """
        Loads the verify setup screen for the user.
        :return: None
        """
        # Initialize verify setup screen by instantiating VerifySetupWindow class.
        self.verify_screen = VerifySetupWindow(self.phoneControl)

        # Attach functionality to signals in VerifySetupWindow.
        # Signals are generated by the VerifySetupWindow class when a button is pushed to change views.
        self.verify_screen.sigReturnHome.connect(self.show_home)
        self.verify_screen.sigGoodToFly.connect(self.updateFlightStatus)

        # Close previous screen.
        try:
            self.home.close()
        except:
            print("Home window not open")

        # Show verify setup screen.
        self.verify_screen.show()

    def updateFlightStatus(self):
        self.flightModeEnabled = True

    def show_tracking_window(self):
        """
        Loads the tracking screen for the user.
        :return: None
        """
        # Close report window if open.
        try:
            self.report_window.close()
        except:
            print("Report window not open")

        # Initialize the tracking screen by instantiating TrackingWindow class.
        self.tracking_window = TrackingWindow(self.phoneControl)

        # Attach functionality to signals in TrackingWindow.
        # Signals are generated by the TrackingWindow class when a button is pushed to change views.
        self.tracking_window.sigReturnHome.connect(self.show_home)
        self.tracking_window.sigStopTracking.connect(self.show_loading_window)
        self.tracking_window.sigFlightInfoConfirmed.connect(self.get_flight_info)

        # Close the previous screen.
        try:
            self.home.close()
        except:
            print("Home window not open")

        # Show the tracking screen.
        self.tracking_window.show()

    def get_flight_info(self, pilotName: str, instructorName: str, flightInstructions: str):
        """
         Saves the pilot name, instructor name, and flight instructions once confirmed by the user.
         :param pilotName: String containing the pilot name
         :param instructorName: String containing the instructor name
         :param flightInstructions: String containing the flight instructions
         :return: None
         """
        self.pilotName = pilotName
        self.instructorName = instructorName
        self.flightInstructions = flightInstructions

    def show_report_window(self, flightData: str, usingPreviousFlight: bool):
        """
        Loads the report screen for the user.
        :param flightData: String containing path to flight data. Should be .flight file if usingPreviousFlight is
        true, or coordinates if usingPreviousFlight is false.
        :param usingPreviousFlight: Boolean representing if the report view is for an existing .flight file or a
        new analysis.
        :return: None
        """
        # Initialize the report by instantiating ReportWindow class.
        self.report_window = ReportWindow(self.pilotName, self.instructorName, self.flightInstructions,
                                          flightData, usingPreviousFlight)

        # Attach functionality to signals in ReportWindow.
        # Signals are generated by the ReportWindow class when a button is pushed to change views.
        self.report_window.sigReturnHome.connect(self.show_home)
        self.report_window.sigStartTracking.connect(self.show_tracking_window)

        # Close the previous screen.
        try:
            if usingPreviousFlight is False:
                self.loading_window.close()
            else:
                self.home.close()
        except:
            print("Error")

        # Show the report screen.
        self.report_window.show()

    def show_loading_window(self):
        """
        Loads the loading screen for the user.
        :return: None
        """
        # Initialize the report by instantiating LoadingWindow class.
        self.loading_window = LoadingWindow()

        # Attach functionality to signals in LoadingWindow.
        # Signals are generated by the LoadingWindow class when a button is pushed to change views.
        self.loading_window.sigReturnHome.connect(self.show_home)

        # Show report view on flight coordinates.
        flightData = '../Tests/TestFiles/JSONDUMP.flight'
        self.loading_window.sigTestReport.connect(lambda *args: self.show_report_window(flightData, False))
        self.loading_window.sigTransferFootage.connect(lambda *args: self.transfer_footage(self.phoneControl))
        #self.fileTransferComplete.connect(self.transfer_complete)

        # Close the previous screen.
        try:
            self.tracking_window.close()
        except:
            print("Error")

        # Show the loading screen.
        self.loading_window.show()

        print("Window shown")

    def transfer_footage(self, phoneControl: PhoneControl):
        print("here")
        pathToDesktop = os.path.join(os.path.join(os.path.expanduser('~')), 'Desktop/')
        phoneControl.startFileTransfer(pathToDesktop)
        phoneControl.waitForFileTransfer()
        #self.fileTransferComplete.emit()

    def transfer_complete(self):
        print("I did it!")

def createPhoneConnection(portNo):
    phoneControl = PhoneControl(portNo)
    return phoneControl

def close_conn(phoneControl: PhoneControl):
    try:
        print("Connection closed")
        phoneControl.closeConn()
    except Exception as e:
        print(str(e))

def main():
    """
    Begins the main application.
    :return: None
    """
    # Create the main application.
    app = qtw.QApplication(sys.argv)

    # Create phone controller
    phoneControl = createPhoneConnection(8000)

    # Create a controller for the application.
    controller = Controller(phoneControl=phoneControl)

    # Start the application on the home startup screen.
    controller.show_home()
    app.aboutToQuit.connect(lambda *args: close_conn(phoneControl))
    sys.exit(app.exec_())

if __name__ == '__main__':
    main()
