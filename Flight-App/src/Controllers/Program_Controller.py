import sys
from PyQt5 import QtWidgets as qtw
from View_TrackingScreen import TrackingWindow
from View_StartupScreen import StartupWindow
from View_VerifySetupScreen import VerifySetupWindow
from View_ReportScreen import ReportWindow

class Controller:
    """
    Controller class for the application. Changes between application views based on user input.
    Run this file in order to begin the application.
    :return: None
    """
    def __init__(self):
        pass

    def show_home(self):
        """
        Loads the home startup screen for the user.
        :return: None
        """
        # Close previous window.
        try:
            self.tracking_window.close()
        except:
            print("Tracking window not open")
        try:
            self.window.close()
        except:
            print("Main window not open")
        try:
            self.verify_screen.close()
        except:
            print("Verify screen window not open")
        try:
            self.report_window.close()
        except:
            print("Report window not open")

        # Initialize home startup screen by instantiating StartupWindow class.
        self.home = StartupWindow()

        # Attach functionality to signals in StartupWindow.
        # Signals are generated by the StartupWindow class when a button is pushed to change views.
        self.home.sigVerifySetup.connect(self.show_verify_screen)
        self.home.sigStartTracking.connect(self.show_tracking_window)
        self.home.sigImportFlight.connect(self.show_main)
        self.home.sigTestReport.connect(self.show_report_window)

        # Show the screen
        self.home.show()

    def show_verify_screen(self):
        """
        Loads the verify setup screen for the user.
        :return: None
        """
        # Initialize verify setup screen by instantiating VerifySetupWindow class.
        self.verify_screen = VerifySetupWindow()

        # Attach functionality to signals in VerifySetupWindow.
        # Signals are generated by the VerifySetupWindow class when a button is pushed to change views.
        self.verify_screen.sigReturnHome.connect(self.show_home)

        # Close previous screen.
        self.home.close()

        # Show verify setup screen.
        self.verify_screen.show()

    # TODO: Make this the import flight option. For now, closes application when pressed.
    def show_main(self):
        """
        Loads the import previous flight screen for the user.
        :return: None
        """
        self.home.close()

    def show_tracking_window(self):
        """
        Loads the tracking screen for the user.
        :return: None
        """
        # Close report window if open.
        try:
            self.report_window.close()
        except:
            print("Report window not open")

        # Initialize the tracking screen by instantiating TrackingWindow class.
        self.tracking_window = TrackingWindow()

        # Attach functionality to signals in TrackingWindow.
        # Signals are generated by the TrackingWindow class when a button is pushed to change views.
        self.tracking_window.sigReturnHome.connect(self.show_home)

        # Close the previous screen.
        self.home.close()

        # Show the tracking screen.
        self.tracking_window.show()

    def show_report_window(self):
        """
        Loads the report screen for the user.
        :return: None
        """
        # Initialize the report by instantiating ReportWindow class.
        self.report_window = ReportWindow()

        # Attach functionality to signals in ReportWindow.
        # Signals are generated by the ReportWindow class when a button is pushed to change views.
        self.report_window.sigReturnHome.connect(self.show_home)
        self.report_window.sigStartTracking.connect(self.show_tracking_window)
        # self.report_window.sigExportResults.connect(self.home().close)

        # Close the previous screen.
        self.home.close()

        # Show the report screen.
        self.report_window.show()

def main():
    """
    Begins the main application.
    :return: None
    """
    # Create the main application.
    app = qtw.QApplication(sys.argv)

    # Create a controller for the application.
    controller = Controller()

    # Start the application on the home startup screen.
    controller.show_home()
    sys.exit(app.exec_())

if __name__ == '__main__':
    main()
