import sys, os, signal
from PyQt5 import QtWidgets as qtw, QtCore as qtc
from View_TrackingScreen import TrackingWindow
from View_StartupScreen import StartupWindow
from View_VerifySetupScreen import VerifySetupWindow
from View_ReportScreen import ReportWindow
from View_LoadingScreen import LoadingWindow
from Controllers.PhoneController import PhoneControl as PhoneControl
from Controllers.RPIController import RPIController as RPIController
from Controllers.OpenCVController import DroneTracker
from Export.ImportFile import importData

class Controller:
    """
    Controller class for the application. Changes between application views based on user input.
    Run this file in order to begin the application.
    :return: None
    """

    def __init__(self, phoneControl: PhoneControl, rpiControl: RPIController):
        self.pilotName = ''
        self.instructorName = ''
        self.flightInstructions = ''
        self.flightModeEnabled = False
        self.phoneControl = phoneControl
        self.rpiControl = rpiControl
        self.flightDict = {
            "pilotName": "",
            "instructorName": "",
            "flightInstr": "",
            "flightDate": "",
            "flightLength": 0.0,
            "coords": [],
            "velocities": [],
            "avgVel": 0.0,
            "maxVel": 0.0,
            "minVel": 0.0,
            "smoothness": 0.0,
            "legalPoints": []
        }
        pass

    def show_home(self):
        """
        Loads the home startup screen for the user.
        :return: None
        """
        # Close previous window.
        try:
            self.tracking_window.close()
        except:
            print("Tracking window not open")
        try:
            self.window.close()
        except:
            print("Main window not open")
        try:
            self.verify_screen.close()
        except:
            print("Verify screen window not open")
        try:
            self.report_window.close()
        except:
            print("Report window not open")
        try:
            self.loading_window.close()
        except:
            print("Loading window not open")

        # Initialize home startup screen by instantiating StartupWindow class.
        self.home = StartupWindow(self.flightModeEnabled)

        # Attach functionality to signals in StartupWindow.
        # Signals are generated by the StartupWindow class when a button is pushed to change views.
        self.home.sigVerifySetup.connect(self.show_verify_screen)
        self.home.sigStartTracking.connect(self.show_tracking_window)

        # Import previous flight
        self.home.sigImportFlight.connect(self.import_flight)

        # Show the screen
        self.home.show()

    def import_flight(self, flightPath: str):
        """
        Reads in a .flight file and displays the report view for it.
        :param flightPath: String with file path of chosen file to import.
        :return: None
        """
        if flightPath != '':
            print('Importing file ' + flightPath)
            self.show_report_window(flightPath, True, {})

    def show_verify_screen(self):
        """
        Loads the verify setup screen for the user.
        :return: None
        """
        # Initialize verify setup screen by instantiating VerifySetupWindow class.
        self.verify_screen = VerifySetupWindow(self.phoneControl, self.rpiControl)

        # Attach functionality to signals in VerifySetupWindow.
        # Signals are generated by the VerifySetupWindow class when a button is pushed to change views.
        self.verify_screen.sigReturnHome.connect(self.show_home)
        self.verify_screen.sigGoodToFly.connect(self.updateFlightStatus)

        # Close previous screen.
        try:
            self.home.close()
        except:
            print("Home window not open")

        # Show verify setup screen.
        self.verify_screen.show()

    def updateFlightStatus(self):
        """
        Sets the status of the system verification test.
        :return: none
        """
        self.flightModeEnabled = True

    def show_tracking_window(self):
        """
        Loads the tracking screen for the user.
        :return: None
        """
        # Close report window if open.
        try:
            self.report_window.close()
        except:
            print("Report window not open")

        # Initialize the tracking screen by instantiating TrackingWindow class.
        self.tracking_window = TrackingWindow(self.phoneControl)

        # Attach functionality to signals in TrackingWindow.
        # Signals are generated by the TrackingWindow class when a button is pushed to change views.
        self.tracking_window.sigReturnHome.connect(self.show_home)
        self.tracking_window.sigStopTracking.connect(self.show_loading_window)
        self.tracking_window.sigFlightInfoConfirmed.connect(self.get_flight_info)

        # Close the previous screen.
        try:
            self.home.close()
        except:
            print("Home window not open")

        # Show the tracking screen.
        self.tracking_window.show()

    def get_flight_info(self, pilotName: str, instructorName: str, flightInstructions: str):
        """
         Saves the pilot name, instructor name, and flight instructions once confirmed by the user.
         :param pilotName: String containing the pilot name
         :param instructorName: String containing the instructor name
         :param flightInstructions: String containing the flight instructions
         :return: None
         """
        self.pilotName = pilotName
        self.instructorName = instructorName
        self.flightInstructions = flightInstructions

    def show_report_window(self, previousFlight: str, usingPreviousFlight: bool, flightData: dict):
        """
        Loads the report screen for the user.
        :param previousFlight: String containing path to flight data. Should be .flight file if usingPreviousFlight is
        true, or empty if usingPreviousFlight is false.
        :param usingPreviousFlight: Boolean representing if the report view is for an existing .flight file or a
        new analysis.
        :param flightData: Dictionary containing the flight data. Should be populated with only coordinates if
        usingPreviousFlight is false, and empty if usingPreviousFlight is true.
        :return: None
        """
        # Initialize the report by instantiating ReportWindow class.
        self.report_window = ReportWindow(self.pilotName, self.instructorName, self.flightInstructions,
                                          previousFlight, usingPreviousFlight, flightData)

        # Attach functionality to signals in ReportWindow.
        # Signals are generated by the ReportWindow class when a button is pushed to change views.
        self.report_window.sigReturnHome.connect(self.show_home)
        self.report_window.sigStartTracking.connect(self.show_tracking_window)

        # Close the previous screen.
        try:
            if usingPreviousFlight is False:
                self.loading_window.close()
            else:
                self.home.close()
        except:
            print("Error")

        # Show the report screen.
        self.report_window.show()

    def show_loading_window(self):
        """
        Loads the loading screen for the user.
        :return: None
        """
        # Initialize the report by instantiating LoadingWindow class.
        self.loading_window = LoadingWindow()

        # Attach functionality to signals in LoadingWindow.
        # Signals are generated by the LoadingWindow class when a button is pushed to change views.
        self.loading_window.sigReturnHome.connect(self.show_home)

        # Show report view on flight coordinates.
        flightData = importData('../Tests/TestFiles/JSONDUMP_with_illegal.flight')
        self.loading_window.sigTestReport.connect(lambda *args: self.show_report_window("", False, flightData))
        self.loading_window.sigTransferFootage.connect(lambda *args: self.transfer_footage(self.phoneControl))

        # Close the previous screen.
        try:
            self.tracking_window.close()
        except:
            print("Error")

        # Show the loading screen.
        self.loading_window.show()

        print("Window shown")

    def transfer_footage(self, phoneControl: PhoneControl):
        """
        Transfers footage and calls DroneController to analyze the footage.
        :param phoneControl: Phone Controller object for the active phone connection.
        :return: none
        """
        pathToDesktop = os.path.join(os.path.join(os.path.expanduser('~')), 'Desktop/')
        try:
            phoneControl.startFileTransfer(pathToDesktop)
            phoneControl.waitForFileTransfer()

            ## TODO: Make this call Donald's function, which will return an array of tuples to go in "coords".
            ## TODO: Note, his function will take in the input pathToDesktop or whatever he names the file every time.
            self.flightDict["coords"] = [[0.0, -7.442879954188971, 4.657040332605033, 5.785744638847698], [0.5, 14.15413405558262, 6.404094139145398, 0.33128441170089173], [1.0, 13.874733769993767, 5.374603793314699, -2.599891163224722], [1.5, 7.673733650705018, 8.43790730084859, -6.847937641435276], [2.0, 1.3859489302153811, 13.088684505591676, 9.429378802197043], [2.5, -12.68823757832141, 13.640934222840354, 0.11341140559761209], [3.0, 7.85524055618181, 9.755179104884158, 3.8514535070593325], [3.5, 9.739530741860847, 11.442802196285172, 5.756859813831817], [4.0, 9.478787230683501, 4.173060058306486, 8.39836422799811], [4.5, 9.474335675244946, -12.502004722811515, 2.701854636145602], [5.0, 6.012011042584156, 8.313818886204807, 4.438653568326196], [5.5, -11.165719649806105, 0.48923173954354415, 4.297425434330213], [6.0, 0.5589341921103191, 14.63696629554165, 5.223399080130893], [6.5, 13.644449678967216, 5.748718820100219, 8.844522369047823], [7.0, 3.825264139967299, 13.635747629142022, 8.945604447512554], [7.5, 5.977757414858673, 9.375300027540115, 5.675972861858413], [8.0, 13.417678281674961, 3.2124870580184077, 0.03859158860720635], [8.5, 13.208721915475655, 3.5268245256076813, 2.4486462234707798], [9.0, 9.613755527096085, 4.567867218127018, 8.256208118888132], [9.5, 13.25533066420891, 14.180594369781879, 3.9079533840462046], [10.0, 2.356699319662017, 9.377480951698557, -6.989853527596546], [10.5, 1.288033996806523, 7.9676935918266, 8.885665221405667], [11.0, 3.9549901228443924, 3.5217828795649524, 8.39657227724237], [11.5, 7.433100445889062, 2.285495496193582, 2.3076815580949637], [12.0, 9.869309356270467, 8.444225718601132, 2.9182873764884754], [12.5, 9.334574770726858, 10.738581124385671, 2.8073103408019895], [13.0, 6.184097378236125, 5.433085701211935, 7.8139202200252855], [13.5, 2.032307269529716, 13.531042718245043, 2.896360858781397], [14.0, 7.493368891647023, 11.753855822670348, 6.770620626976057], [14.5, 2.2471759502834954, 10.44929219426867, 1.2901304312274486], [15.0, 14.189194311235717, 13.296177738642987, 5.150046129374196], [15.5, 14.651900367504485, 1.8819053496004527, -7.5224305124640365], [16.0, 12.405778641842375, 11.72145490365366, 1.9088266675822407], [16.5, 6.429620109059664, 0.21685120674437453, 3.2528548871969623], [17.0, 2.0205304293955537, 6.75776193126032, 5.722749301785769], [17.5, 11.880349229747663, 6.2960491496708055, 5.325365443409556], [18.0, 13.486227566132724, 8.17250097703113, -9.011239501703685], [18.5, 0.7774006335601114, 12.129037780201603, 3.3490457937768636], [19.0, 3.4302467587301244, 12.336027114686058, 3.482345789934266], [19.5, 2.482058930523499, 0.42200352012385756, 9.553697652775563], [20.0, 10.204360675584006, 12.908431720869961, 9.390935153524339], [20.5, 10.202909466720776, 13.761356226711511, 2.5669167090115783], [21.0, 13.284272016435288, 13.800641851772728, 3.000634400366826], [21.5, 1.1008642004068898, 11.510981024402062, 0.84952215865014], [22.0, 10.931461193890076, 6.71834465381565, 6.512486632169324], [22.5, 2.5425280592241775, 7.971738620393704, 6.338008581939598], [23.0, 0.21144006274038618, 7.055570028465038, 8.863259711681058], [23.5, 1.710426535171063, 6.638117274752689, 6.595478881615526], [24.0, -14.255526022723497, 10.414293713483332, 2.0680652702091606], [24.5, 8.321434889351082, 13.189177267678781, 5.578576907197959], [25.0, 13.42351188344262, 12.627662595973353, -1.3085668264594807], [25.5, -2.3045974633883457, 0.43353098497649345, 0.09084898491813709], [26.0, 8.94677612958056, 9.135739865757115, 9.189234320105523], [26.5, 11.003616650596836, 4.5172042815127265, 4.955744790304295], [27.0, 3.8724453524757156, 10.99281545814829, 1.167607510415154], [27.5, 12.14683660641287, 11.178505218174932, -3.371433141133766], [28.0, 7.03428157433909, -1.3089755169010342, 8.287174261600724], [28.5, 10.289170626582669, 4.009875826436319, 9.694835645924528], [29.0, 2.75661303998753, 4.499113844173469, 4.111848906888626], [29.5, 3.54733780673131, 2.9258298402162772, 7.053792796459152], [30.0, 2.7082238049876404, 7.834993768827822, 2.96171823286006], [30.5, 6.941728324265158, 13.878486250189212, 2.1588914229602563], [31.0, -13.599093646752625, 10.200629184424477, 5.149518053469536], [31.5, 7.8310332167860635, 1.5437786883218814, 9.968804881883752], [32.0, 5.384532290617584, 9.378638981703162, 3.9336652122529445], [32.5, 0.11493668250606104, 8.179274010481512, 5.0911037444658405], [33.0, 3.7016838048209855, 0.6809291199245926, 8.417297447610101], [33.5, 0.7237487640844803, 4.744807462457198, 7.8341943043927875], [34.0, 14.586000895683684, 8.79696121108542, 7.780438492816181], [34.5, 10.915461655385709, 9.76480195689567, 6.646150201499173], [35.0, 14.081697007803958, 8.026218985766707, 3.9844011841010274], [35.5, 10.056864921839242, 6.608017076646553, 1.3287394477806014], [36.0, 8.214641134099143, -5.927045637681171, 3.9827199452512954], [36.5, 11.270229766888297, 7.835255190818629, 4.904330336512474], [37.0, 1.3301840181371516, 3.7627744963922067, 4.475590227800238], [37.5, 9.569413441225766, 10.641679372559183, 9.926198092814186], [38.0, 13.982923051389003, 1.3834424458327255, 9.53539972829461], [38.5, 2.44193488226252, 14.556826309077396, 5.970066652678721], [39.0, 3.6034067868556945, 1.0544274221663192, 3.0004121510897375], [39.5, 12.20317235845481, 1.1506481130122297, 3.5447309543904826], [40.0, 1.9801631161346345, 2.3726944550189004, 0.6214705161736789], [40.5, 10.527652183384859, 1.2972254561919994, 6.167872395622393], [41.0, 2.606573748369051, 9.771015971078215, 4.986964059831145], [41.5, 4.267660328506391, 12.458396081029564, 8.183598824833396], [42.0, 14.072541056302558, 0.004891445101783964, 6.403892246337618], [42.5, -1.5963166003892075, 1.6019161988242947, 3.6710904385419973], [43.0, 3.5941155088006664, 5.192103025461774, 2.4961983540022823], [43.5, 5.805964712158696, 6.315575556503303, 6.40077289145426], [44.0, 11.813294594349127, 4.04991635431, 8.439823607259102], [44.5, 12.391529233709784, 2.7328837106238604, -0.6543618275564911], [45.0, 9.155253931694146, 10.52329213912565, 1.1161771275320809], [45.5, -8.96750658481168, 12.18348915532552, 8.145781740363203], [46.0, 1.3415544771509809, 10.969180579886192, 9.038565762240395], [46.5, 6.783476808232476, 1.0603151453792858, 2.412781550675036], [47.0, 10.977975897355444, 0.6073742348875638, 4.2452276285659725], [47.5, 8.103226305643597, 14.307417568411292, 2.089057419894287], [48.0, -9.693301018391894, 1.6261663467753584, 9.83496924216579], [48.5, 3.7251605766906337, 9.095335801982024, 8.166952727806708], [49.0, 12.450813189103208, 7.335589986767799, 7.607282561180798], [0.0, 0.0, 0.0, 0.0]]
            ## flightDict["coords"] = <Put Donald's function here>

            self.transfer_complete(self.flightDict)
        except Exception as e:
            msgBox = qtw.QMessageBox()
            msgBox.setText(str(e))
            msgBox.exec()

    def transfer_complete(self, flightData: dict):
        """
        Calls the report view using the flight data dictionary.
        :param flightData: Dictionary of flight data
        :return: none.
        """
        self.show_report_window("", False, flightData)

def createPhoneConnection(portNo):
    """
    Creates a PhoneControl object used to commmunicate with the phones.
    :param portNo: Port number
    :return: PhoneControl object.
    """
    phoneControl = PhoneControl(portNo)
    return phoneControl

def close_conn(phoneControl: PhoneControl):
    """
    Closes the connection from the laptop to the phones.
    :param phoneControl: PhoneControl object containing the active connection.
    :return: None.
    """
    try:
        print("Connection closed")
        phoneControl.closeConn()
    except Exception as e:
        print(str(e))

def main():
    """
    Begins the main application.
    :return: None
    """
    # Create the main application.
    app = qtw.QApplication(sys.argv)

    # Create phone controller
    phoneControl = createPhoneConnection(8000)

    # Create the RPI controller
    control = RPIController('localhost', '9876')

    # Create a controller for the application.
    controller = Controller(phoneControl=phoneControl, rpiControl=control)

    # Start the application on the home startup screen.
    controller.show_home()
    app.aboutToQuit.connect(lambda *args: close_conn(phoneControl))
    sys.exit(app.exec_())

if __name__ == '__main__':
    main()
