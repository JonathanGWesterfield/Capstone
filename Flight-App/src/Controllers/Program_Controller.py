import sys, os, signal
from PyQt5 import QtWidgets as qtw, QtCore as qtc
from View_TrackingScreen import TrackingWindow
from View_StartupScreen import StartupWindow
from View_VerifySetupScreen import VerifySetupWindow
from View_ReportScreen import ReportWindow
from View_LoadingScreen import LoadingWindow
from Controllers.PhoneController import PhoneControl as PhoneControl
from Controllers.RPIController import RPIController as RPIController
from Controllers.OpenCVController import DroneTracker
from Export.ImportFile import importData

class Controller:
    """
    Controller class for the application. Changes between application views based on user input.
    Run this file in order to begin the application.
    :return: None
    """

    def __init__(self, phoneControl: PhoneControl, rpiControl: RPIController):
        self.pilotName = ''
        self.instructorName = ''
        self.flightInstructions = ''
        self.flightModeEnabled = False
        self.phoneControl = phoneControl
        self.rpiControl = rpiControl
        self.flightDict = {
            "pilotName": "",
            "instructorName": "",
            "flightInstr": "",
            "flightDate": "",
            "flightLength": 0.0,
            "coords": [],
            "velocities": [],
            "avgVel": 0.0,
            "maxVel": 0.0,
            "minVel": 0.0,
            "smoothness": 0.0,
            "legalPoints": []
        }
        pass

    def show_home(self):
        """
        Loads the home startup screen for the user.
        :return: None
        """
        # Close previous window.
        try:
            self.tracking_window.close()
        except:
            print("Tracking window not open")
        try:
            self.window.close()
        except:
            print("Main window not open")
        try:
            self.verify_screen.close()
        except:
            print("Verify screen window not open")
        try:
            self.report_window.close()
        except:
            print("Report window not open")
        try:
            self.loading_window.close()
        except:
            print("Loading window not open")

        # Initialize home startup screen by instantiating StartupWindow class.
        self.home = StartupWindow(self.flightModeEnabled)

        # Attach functionality to signals in StartupWindow.
        # Signals are generated by the StartupWindow class when a button is pushed to change views.
        self.home.sigVerifySetup.connect(self.show_verify_screen)
        self.home.sigStartTracking.connect(self.show_tracking_window)

        # Import previous flight
        self.home.sigImportFlight.connect(self.import_flight)

        # Show the screen
        self.home.show()

    def import_flight(self, flightPath: str):
        """
        Reads in a .flight file and displays the report view for it.
        :param flightPath: String with file path of chosen file to import.
        :return: None
        """
        if flightPath != '':
            print('Importing file ' + flightPath)
            self.show_report_window(flightPath, True, {})

    def show_verify_screen(self):
        """
        Loads the verify setup screen for the user.
        :return: None
        """
        # Initialize verify setup screen by instantiating VerifySetupWindow class.
        self.verify_screen = VerifySetupWindow(self.phoneControl, self.rpiControl)

        # Attach functionality to signals in VerifySetupWindow.
        # Signals are generated by the VerifySetupWindow class when a button is pushed to change views.
        self.verify_screen.sigReturnHome.connect(self.show_home)
        self.verify_screen.sigGoodToFly.connect(self.updateFlightStatus)

        # Close previous screen.
        try:
            self.home.close()
        except:
            print("Home window not open")

        # Show verify setup screen.
        self.verify_screen.show()

    def updateFlightStatus(self):
        """
        Sets the status of the system verification test.
        :return: none
        """
        self.flightModeEnabled = True

    def show_tracking_window(self):
        """
        Loads the tracking screen for the user.
        :return: None
        """
        # Close report window if open.
        try:
            self.report_window.close()
        except:
            print("Report window not open")

        # Initialize the tracking screen by instantiating TrackingWindow class.
        self.tracking_window = TrackingWindow(self.phoneControl)

        # Attach functionality to signals in TrackingWindow.
        # Signals are generated by the TrackingWindow class when a button is pushed to change views.
        self.tracking_window.sigReturnHome.connect(self.show_home)
        self.tracking_window.sigStopTracking.connect(self.show_loading_window)
        self.tracking_window.sigFlightInfoConfirmed.connect(self.get_flight_info)

        # Close the previous screen.
        try:
            self.home.close()
        except:
            print("Home window not open")

        # Show the tracking screen.
        self.tracking_window.show()

    def get_flight_info(self, pilotName: str, instructorName: str, flightInstructions: str):
        """
         Saves the pilot name, instructor name, and flight instructions once confirmed by the user.
         :param pilotName: String containing the pilot name
         :param instructorName: String containing the instructor name
         :param flightInstructions: String containing the flight instructions
         :return: None
         """
        self.pilotName = pilotName
        self.instructorName = instructorName
        self.flightInstructions = flightInstructions

    def show_report_window(self, previousFlight: str, usingPreviousFlight: bool, flightData: dict):
        """
        Loads the report screen for the user.
        :param previousFlight: String containing path to flight data. Should be .flight file if usingPreviousFlight is
        true, or empty if usingPreviousFlight is false.
        :param usingPreviousFlight: Boolean representing if the report view is for an existing .flight file or a
        new analysis.
        :param flightData: Dictionary containing the flight data. Should be populated with only coordinates if
        usingPreviousFlight is false, and empty if usingPreviousFlight is true.
        :return: None
        """
        # Initialize the report by instantiating ReportWindow class.
        self.report_window = ReportWindow(self.pilotName, self.instructorName, self.flightInstructions,
                                          previousFlight, usingPreviousFlight, flightData)

        # Attach functionality to signals in ReportWindow.
        # Signals are generated by the ReportWindow class when a button is pushed to change views.
        self.report_window.sigReturnHome.connect(self.show_home)
        self.report_window.sigStartTracking.connect(self.show_tracking_window)

        # Close the previous screen.
        try:
            if usingPreviousFlight is False:
                self.loading_window.close()
            else:
                self.home.close()
        except:
            print("Error")

        # Show the report screen.
        self.report_window.show()

    def show_loading_window(self):
        """
        Loads the loading screen for the user.
        :return: None
        """
        # Initialize the report by instantiating LoadingWindow class.
        self.loading_window = LoadingWindow()

        # Attach functionality to signals in LoadingWindow.
        # Signals are generated by the LoadingWindow class when a button is pushed to change views.
        self.loading_window.sigReturnHome.connect(self.show_home)

        # Show report view on flight coordinates.
        flightData = importData('../Tests/TestFiles/JSONDUMP_with_illegal.flight')
        self.loading_window.sigTestReport.connect(lambda *args: self.show_report_window("", False, flightData))
        self.loading_window.sigTransferFootage.connect(lambda *args: self.transfer_footage(self.phoneControl))

        # Close the previous screen.
        try:
            self.tracking_window.close()
        except:
            print("Error")

        # Show the loading screen.
        self.loading_window.show()

        print("Window shown")

    def transfer_footage(self, phoneControl: PhoneControl):
        """
        Transfers footage and calls DroneController to analyze the footage.
        :param phoneControl: Phone Controller object for the active phone connection.
        :return: none
        """
        pathToDesktop = os.path.join(os.path.join(os.path.expanduser('~')), 'Desktop/')
        try:
            phoneControl.startFileTransfer(pathToDesktop)
            phoneControl.waitForFileTransfer()

            ## TODO: Make this call Donald's function, which will return an array of tuples to go in "coords".
            ## TODO: Note, his function will take in the input pathToDesktop or whatever he names the file every time.
            self.flightDict["coords"]= [
                [
                    0.0,
                    12.1171875,
                    12.6328125,
                    6.699074074074074
                ],
                [
                    0.5,
                    12.12109375,
                    12.640625,
                    6.6967592592592595
                ],
                [
                    1.0,
                    12.13671875,
                    12.65625,
                    6.694444444444444
                ],
                [
                    1.5,
                    12.1328125,
                    12.65625,
                    6.69212962962963
                ],
                [
                    2.0,
                    12.12109375,
                    12.640625,
                    6.68287037037037
                ],
                [
                    2.5,
                    12.109375,
                    12.609375,
                    6.657407407407407
                ],
                [
                    3.0,
                    12.10546875,
                    12.5859375,
                    6.62962962962963
                ],
                [
                    3.5,
                    12.1015625,
                    12.5546875,
                    6.601851851851852
                ],
                [
                    4.0,
                    12.1015625,
                    12.515625,
                    6.576388888888889
                ],
                [
                    4.5,
                    12.1015625,
                    12.46875,
                    6.546296296296297
                ],
                [
                    5.0,
                    12.1015625,
                    12.37890625,
                    6.504629629629629
                ],
                [
                    5.5,
                    12.10546875,
                    12.203125,
                    6.458333333333334
                ],
                [
                    6.0,
                    12.125,
                    11.92578125,
                    6.400462962962963
                ],
                [
                    6.5,
                    12.16015625,
                    11.5390625,
                    6.351851851851852
                ],
                [
                    7.0,
                    12.19921875,
                    11.08203125,
                    6.298611111111111
                ],
                [
                    7.5,
                    12.24609375,
                    10.55859375,
                    6.256944444444445
                ],
                [
                    8.0,
                    12.29296875,
                    9.98046875,
                    6.212962962962964
                ],
                [
                    8.5,
                    12.33984375,
                    9.4140625,
                    6.141203703703704
                ],
                [
                    9.0,
                    12.40625,
                    8.82421875,
                    6.05787037037037
                ],
                [
                    9.5,
                    12.4921875,
                    8.25390625,
                    5.995370370370371
                ],
                [
                    10.0,
                    12.56640625,
                    7.750000000000001,
                    5.9375
                ],
                [
                    10.5,
                    12.61328125,
                    7.25,
                    5.900462962962964
                ],
                [
                    11.0,
                    12.6484375,
                    6.71484375,
                    5.868055555555555
                ],
                [
                    11.5,
                    12.67578125,
                    6.25390625,
                    5.837962962962963
                ],
                [
                    12.0,
                    12.6953125,
                    5.87109375,
                    5.805555555555556
                ],
                [
                    12.5,
                    12.703125,
                    5.5546875,
                    5.770833333333333
                ],
                [
                    13.0,
                    12.7421875,
                    5.2734375,
                    5.712962962962963
                ],
                [
                    13.5,
                    12.859375,
                    5.01953125,
                    5.625
                ],
                [
                    14.0,
                    13.0625,
                    4.80859375,
                    5.541666666666667
                ],
                [
                    14.5,
                    13.3046875,
                    4.5859375,
                    5.467592592592593
                ]
            ]
            ## flightDict["coords"] = <Put Donald's function here>

            self.transfer_complete(self.flightDict)
        except Exception as e:
            msgBox = qtw.QMessageBox()
            msgBox.setText(str(e))
            msgBox.exec()

    def transfer_complete(self, flightData: dict):
        """
        Calls the report view using the flight data dictionary.
        :param flightData: Dictionary of flight data
        :return: none.
        """
        self.show_report_window("", False, flightData)

def createPhoneConnection(portNo):
    """
    Creates a PhoneControl object used to commmunicate with the phones.
    :param portNo: Port number
    :return: PhoneControl object.
    """
    phoneControl = PhoneControl(portNo)
    return phoneControl

def close_conn(phoneControl: PhoneControl):
    """
    Closes the connection from the laptop to the phones.
    :param phoneControl: PhoneControl object containing the active connection.
    :return: None.
    """
    try:
        print("Connection closed")
        phoneControl.closeConn()
    except Exception as e:
        print(str(e))

def main():
    """
    Begins the main application.
    :return: None
    """
    # Create the main application.
    app = qtw.QApplication(sys.argv)

    # Create phone controller
    phoneControl = createPhoneConnection(8000)

    # Create the RPI controller
    control = RPIController('192.168.1.2', '9876')

    # Create a controller for the application.
    controller = Controller(phoneControl=phoneControl, rpiControl=control)

    # Start the application on the home startup screen.
    controller.show_home()
    app.aboutToQuit.connect(lambda *args: close_conn(phoneControl))
    sys.exit(app.exec_())

if __name__ == '__main__':
    main()
